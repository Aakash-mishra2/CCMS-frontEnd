{"version":3,"file":"static/js/401.70685bd9.chunk.js","mappings":"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","sources":["court/pages/NewCases.js","shared/formElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport Input from \"../../shared/formElements/Input\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Button from \"../../shared/formElements/Button\";\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\r\nimport './CasesForm.css';\r\nimport { useHttpProcess } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/authContext\";\r\nimport ErrorModal from \"../../shared/UIelements/ErrorModal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../../shared/UIelements/LoadingSpinner\";\r\nexport default function NewCases() {\r\n    const auth = useContext(AuthContext);\r\n    const [formState, inputHandler] = useForm({\r\n        court: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        location_city: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        location_pincode: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        judge: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n    }, false\r\n    )\r\n    const { isLoading, sendRequest, error, clearError } = useHttpProcess();\r\n\r\n    const history = useNavigate();\r\n\r\n    const caseSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            await sendRequest(\r\n                process.env.REACT_APP_BACKEND_URL + '/admin/newcase',\r\n                'POST',\r\n                JSON.stringify({\r\n                    court: formState.inputs.court.value,\r\n                    description: formState.inputs.description.value,\r\n                    location_city: formState.inputs.location_city.value,\r\n                    location_pincode: formState.inputs.location_pincode.value,\r\n                    judge: formState.inputs.judge.value,\r\n                    plaintiff: auth.loginID\r\n                }),\r\n                { 'Content-Type': 'application/json' }\r\n            );\r\n            history('/');\r\n        }\r\n        catch (err) { }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {(isLoading) && (<LoadingSpinner asOverlay />)}\r\n            <form className=\"case-form\" onSubmit={caseSubmitHandler}>\r\n                <Input\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    id=\"court\"\r\n                    label=\"Court name:\"\r\n                    errorText=\"Please Enter a valid court name, required* \"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    element=\"textarea\"\r\n                    type=\"text\"\r\n                    id=\"description\"\r\n                    label=\"Case Description:\"\r\n                    errorText=\"Please Enter a short case description, atleast 10 words.\"\r\n                    validators={[VALIDATOR_MINLENGTH(9)]}\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    element=\"textarea\"\r\n                    type=\"text\"\r\n                    id=\"location_city\"\r\n                    label=\"Your Permanent Address:\"\r\n                    placeHolder=\"Enter Permanent Address Here.\"\r\n                    errorText=\"This is a required field.\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    element=\"input\"\r\n                    type=\"number\"\r\n                    id=\"location_pincode\"\r\n                    placeHolder=\"Enter Pincode here\"\r\n                    errorText=\"Required, Enter Atleast 6 numbers.\"\r\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(6)]}\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    id=\"judge\"\r\n                    label=\"Name of the Judge:\"\r\n                    errorText=\"Please Enter Valid Name. \"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    onInput={inputHandler}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>ADD CASE</Button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/validators\";\r\nimport './Input.css';\r\n\r\nfunction caseReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ALTER':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default function Input(props) {\r\n\r\n    const [inputState, dispatch] = useReducer(caseReducer, {\r\n        isValid: props.initialValid || false,\r\n        value: props.initialValue || '',\r\n        isTouched: false\r\n    })\r\n\r\n    function changeHandler(event) {\r\n        dispatch({\r\n            type: 'ALTER',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    function touchHandler(event) {\r\n        dispatch({\r\n            type: 'TOUCH',\r\n        })\r\n    }\r\n    const { id, onInput } = props;\r\n    const { isValid, value } = inputState;\r\n\r\n    //useEffect(() = > {trigger this action - function  },[when these things change - dependencies])\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, isValid, value, onInput])\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                type={props.type}\r\n                placeholder={props.placeHolder}\r\n                id={props.id}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) :\r\n            (\r\n                <textarea\r\n                    type={props.type}\r\n                    placeholder={props.placeHolder}\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    if (!state.inputs[inputId]) {\r\n                        continue; //don't go ahead with this iteration of for loop and go to next iteration.\r\n                    }\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []); //dispatch can be a dependency but react makes sure dispatch of usereducer never\r\n    //changes so can be ommited.\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};"],"names":["NewCases","auth","useContext","AuthContext","_useForm","useForm","court","value","isValid","description","location_city","location_pincode","judge","_useForm2","_slicedToArray","formState","inputHandler","_useHttpProcess","useHttpProcess","isLoading","sendRequest","error","clearError","history","useNavigate","caseSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","process","REACT_APP_BACKEND_URL","JSON","stringify","inputs","plaintiff","loginID","t0","stop","_x","apply","arguments","_jsxs","React","children","_jsx","ErrorModal","onClear","LoadingSpinner","asOverlay","className","onSubmit","Input","element","type","id","label","errorText","validators","VALIDATOR_REQUIRE","onInput","VALIDATOR_MINLENGTH","placeHolder","Button","disabled","caseReducer","state","action","_objectSpread","val","validate","isTouched","props","_useReducer","useReducer","initialValid","initialValue","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","useEffect","placeholder","onChange","onBlur","rows","concat","htmlFor","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}