{"version":3,"file":"static/js/675.c37e8699.chunk.js","mappings":"+RAWe,SAASA,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACxBC,GAAsDC,EAAAA,EAAAA,KAA9CC,EAASF,EAATE,UAAWC,EAAWH,EAAXG,YAAaC,EAAKJ,EAALI,MAAOC,EAAUL,EAAVK,WACjCC,GAASC,EAAAA,EAAAA,MAAYC,OAC3BC,GAAgCC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA+CC,EAAAA,EAAAA,GAAQ,CACnDC,WAAY,CACRC,MAAO,IACPC,SAAS,GAEbC,aAAc,CACVF,MAAO,IACPC,SAAS,KAGb,GACHE,GAAAT,EAAAA,EAAAA,GAAAG,EAAA,GAXMO,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAAEG,EAAWH,EAAA,GAmC3C,IAvBAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEejC,EAAY,GAADkC,OAAIC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,sBAAqB,WAAAF,OAAU/B,IAAU,KAAD,EAAxF0B,EAAYE,EAAAM,KAClB1B,EAAYkB,EAAaS,WACzBjB,EACI,CACIP,WAAY,CACRC,MAAOc,EAAaS,UAAUxB,WAC9BE,SAAS,GAEbC,aAAc,CACVF,MAAOc,EAAaS,UAAUrB,aAC9BD,SAAS,KAGjB,GACFe,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,kCAAAA,EAAAS,OAAA,GAAAZ,EAAA,kBAET,kBAlBgB,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAmBjBnB,IACAoB,QAAQC,IAAI,0BAChB,GAAG,CAAC5C,EAAaG,EAAQkB,KACpBX,EACD,OACImC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UACnBF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAAAD,UACDF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,6BAKpB,IAAME,EAAiB,eAAAC,GAAAzB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAwB,EAAOC,GAAK,OAAA1B,EAAAA,EAAAA,KAAAI,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OACX,OAAvBmB,EAAME,iBAAiBD,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAEbjC,EAAY,GAADkC,OACVC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,sBAAqB,kBAAAF,OAAiB/B,GACrD,QACAoD,KAAKC,UAAU,CACX1C,WAAYK,EAAUsC,OAAO3C,WAAWC,MACxCE,aAAcE,EAAUsC,OAAOxC,aAAaF,QAEhD,CAAE,eAAgB,qBACpB,KAAD,EACDvB,EAAS,IAAME,EAAKgE,QAAU,UAAUL,EAAApB,KAAA,eAAAoB,EAAArB,KAAA,EAAAqB,EAAAd,GAAAc,EAAA,gBAE5CV,QAAQC,IAAI,0BAAyB,yBAAAS,EAAAb,OAAA,GAAAW,EAAA,kBACxC,gBAfsBQ,GAAA,OAAAT,EAAAT,MAAA,KAAAC,UAAA,KAiBvB,OACIkB,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAd,SAAA,EACXF,EAAAA,EAAAA,KAACiB,EAAAA,EAAU,CAAC7D,MAAOA,EAAO8D,QAAS7D,IACjCH,IAAe8C,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAACC,WAAS,KAC1CpB,EAAAA,EAAAA,KAACiB,EAAAA,EAAU,CAAC7D,MAAOA,EAAO8D,QAAS7D,KACnC0D,EAAAA,EAAAA,MAAA,QAAMd,UAAU,YAAYoB,SAAUjB,EAAkBF,SAAA,EACpDF,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACFC,GAAG,aACHC,KAAK,OACLC,MAAM,iBACNC,QAAQ,QACRC,UAAU,4BACVC,WAAY,EAACC,EAAAA,EAAAA,OACbC,QAASvD,EACTwD,aAAczD,EAAUsC,OAAO3C,WAAWC,MAC1C8D,gBAAiB1D,EAAUsC,OAAO3C,WAAWE,WAEjD6B,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACFC,GAAG,eACHC,KAAK,OACLC,MAAM,uBACNC,QAAQ,QACRC,UAAU,kEACVC,WAAY,EAACC,EAAAA,EAAAA,OACbC,QAASvD,EACTwD,aAAczD,EAAUsC,OAAOxC,aAAaF,MAC5C8D,gBAAiB1D,EAAUsC,OAAOxC,aAAaD,WAEnD6B,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACT,KAAK,SAASU,UAAW5D,EAAUH,QAAQ+B,SAAE,gBAOrE,C,uGC7GA,SAASiC,EAAYC,EAAOC,GACxB,OAAQA,EAAOb,MACX,IAAK,QACD,OAAAc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRlE,MAAOmE,EAAOE,IACdpE,SAASqE,EAAAA,EAAAA,IAASH,EAAOE,IAAKF,EAAOT,cAE7C,IAAK,QACD,OAAAU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRK,WAAW,IAEnB,QACI,OAAOL,EAEnB,CAEe,SAASd,EAAMoB,GAE1B,IAAAC,GAA+BC,EAAAA,EAAAA,YAAWT,EAAa,CACnDhE,QAASuE,EAAMG,eAAgB,EAC/B3E,MAAOwE,EAAMX,cAAgB,GAC7BU,WAAW,IACbK,GAAAlF,EAAAA,EAAAA,GAAA+E,EAAA,GAJKI,EAAUD,EAAA,GAAEE,EAAQF,EAAA,GAM3B,SAASG,EAAc1C,GACnByC,EAAS,CACLxB,KAAM,QACNe,IAAKhC,EAAM2C,OAAOhF,MAClB0D,WAAYc,EAAMd,YAE1B,CAEA,SAASuB,EAAa5C,GAClByC,EAAS,CACLxB,KAAM,SAEd,CACA,IAAQD,EAAgBmB,EAAhBnB,GAAIO,EAAYY,EAAZZ,QACJ3D,EAAmB4E,EAAnB5E,QAASD,EAAU6E,EAAV7E,OAGjBO,EAAAA,EAAAA,YAAU,WACNqD,EAAQP,EAAIrD,EAAOC,EACvB,GAAG,CAACoD,EAAIpD,EAASD,EAAO4D,IAExB,IAAMJ,EACgB,UAAlBgB,EAAMhB,SACF1B,EAAAA,EAAAA,KAAA,SACIwB,KAAMkB,EAAMlB,KACZ4B,YAAaV,EAAMW,YACnB9B,GAAImB,EAAMnB,GACV+B,SAAUL,EACVM,OAAQJ,EACRjF,MAAO6E,EAAW7E,SAIlB8B,EAAAA,EAAAA,KAAA,YACIwB,KAAMkB,EAAMlB,KACZ4B,YAAaV,EAAMW,YACnB9B,GAAImB,EAAMnB,GACViC,KAAMd,EAAMc,MAAQ,EACpBF,SAAUL,EACVM,OAAQJ,EACRjF,MAAO6E,EAAW7E,QAIlC,OACI6C,EAAAA,EAAAA,MAAA,OACId,UAAS,gBAAAZ,QAAmB0D,EAAW5E,SAAW4E,EAAWN,WACzD,yBAA0BvC,SAAA,EAE9BF,EAAAA,EAAAA,KAAA,SAAOyD,QAASf,EAAMnB,GAAGrB,SAAEwC,EAAMjB,QAChCC,GACCqB,EAAW5E,SAAW4E,EAAWN,YAAazC,EAAAA,EAAAA,KAAA,KAAAE,SAAIwC,EAAMf,cAGtE,C,6FClFM+B,EAAc,SAACtB,EAAOC,GACxB,OAAQA,EAAOb,MACX,IAAK,eACD,IAAImC,GAAc,EAClB,IAAK,IAAMC,KAAWxB,EAAMxB,OACxB,GAAIgD,IAAYvB,EAAOuB,QAAS,CAC5B,IAAKxB,EAAMxB,OAAOgD,GACd,SAEJD,EAAcA,GAAetB,EAAOlE,OACxC,MAEIwF,EAAcA,GAAevB,EAAMxB,OAAOgD,GAASzF,QAI3D,OAAAmE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRxB,QAAM0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACCF,EAAMxB,QAAM,IAAAiD,EAAAA,EAAAA,GAAA,GACdxB,EAAOuB,QAAU,CAAE1F,MAAOmE,EAAOnE,MAAOC,QAASkE,EAAOlE,WAE7DA,QAASwF,IAEjB,IAAK,WACD,MAAO,CACH/C,OAAQyB,EAAOzB,OACfzC,QAASkE,EAAOsB,aAExB,QACI,OAAOvB,EAEnB,EAEapE,EAAU,SAAC8F,EAAeC,GACnC,IAAApB,GAA8BC,EAAAA,EAAAA,YAAWc,EAAa,CAClD9C,OAAQkD,EACR3F,QAAS4F,IACXjB,GAAAlF,EAAAA,EAAAA,GAAA+E,EAAA,GAHKrE,EAASwE,EAAA,GAAEE,EAAQF,EAAA,GAuB1B,MAAO,CAACxE,GAlBa0F,EAAAA,EAAAA,cAAY,SAACzC,EAAIrD,EAAOC,GACzC6E,EAAS,CACLxB,KAAM,eACNtD,MAAOA,EACPC,QAASA,EACTyF,QAASrC,GAEjB,GAAG,KAGiByC,EAAAA,EAAAA,cAAY,SAACC,EAAWC,GACxClB,EAAS,CACLxB,KAAM,WACNZ,OAAQqD,EACRN,YAAaO,GAErB,GAAG,IAGP,C,4IC7DMC,EAAyB,UACzBC,EAA2B,YAC3BC,EAA2B,YAG3BC,EAAuB,QAGhBzC,EAAoB,WAAH,MAAU,CAAEL,KAAM2C,EAAwB,EAE3DI,EAAsB,SAAAhC,GAAG,MAAK,CACvCf,KAAM4C,EACN7B,IAAKA,EACR,EAOYiC,EAAkB,WAAH,MAAU,CAAEhD,KAAM8C,EAAsB,EAEvD9B,EAAW,SAACtE,EAAO0D,GAC5B,IACkC6C,EAD9BtG,GAAU,EAAKuG,GAAAC,EAAAA,EAAAA,GACK/C,GAAU,IAAlC,IAAA8C,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAoC,CAAC,IAA1BC,EAASN,EAAAvG,MACZ6G,EAAUvD,OAAS2C,IACnBhG,EAAUA,GAAWD,EAAM8G,OAAOC,OAAS,GAE3CF,EAAUvD,OAAS4C,IACnBjG,EAAUA,GAAWD,EAAM8G,OAAOC,QAAUF,EAAUxC,KAEtDwC,EAAUvD,OAAS6C,IACnBlG,EAAUA,GAAWD,EAAM8G,OAAOC,QAAUF,EAAUxC,KA7BvC,QA+BfwC,EAAUvD,OACVrD,EAAUA,IAAYD,GAAS6G,EAAUxC,KA/B1B,QAiCfwC,EAAUvD,OACVrD,EAAUA,IAAYD,GAAS6G,EAAUxC,KAEzCwC,EAAUvD,OAAS8C,IACnBnG,EAAUA,GAAW,iBAAiB+G,KAAKhH,GAEnD,CAAC,OAAAiH,GAAAT,EAAAU,EAAAD,EAAA,SAAAT,EAAAW,GAAA,CACD,OAAOlH,CACX,C","sources":["court/pages/UpdateCases.js","shared/formElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport Input from \"../../shared/formElements/Input\";\r\nimport Button from \"../../shared/formElements/Button\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Card from \"../../shared/UIelements/Card\";\r\nimport { useHttpProcess } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/UIelements/ErrorModal\";\r\nimport { AuthContext } from \"../../shared/context/authContext\";\r\nimport LoadingSpinner from \"../../shared/UIelements/LoadingSpinner\";\r\nexport default function UpdateCases() {\r\n    const navigate = useNavigate();\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, sendRequest, error, clearError } = useHttpProcess();\r\n    const caseid = useParams().caseID;\r\n    const [req_case, setReq_case] = useState();\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        new_status: {\r\n            value: ' ',\r\n            isValid: false\r\n        },\r\n        next_hearing: {\r\n            value: ' ',\r\n            isValid: false\r\n        }\r\n    },\r\n        false\r\n    );\r\n    useEffect(() => {\r\n        const getCaseData = async () => {\r\n            try {\r\n                const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/admin/${caseid}`);\r\n                setReq_case(responseData.foundCase);\r\n                setFormData(\r\n                    {\r\n                        new_status: {\r\n                            value: responseData.foundCase.new_status,\r\n                            isValid: true\r\n                        },\r\n                        next_hearing: {\r\n                            value: responseData.foundCase.next_hearing,\r\n                            isValid: true\r\n                        }\r\n                    },\r\n                    true\r\n                );\r\n            } catch (error) { }\r\n        }\r\n        getCaseData();\r\n        console.log('getCase request done...');\r\n    }, [sendRequest, caseid, setFormData]);\r\n    if (!req_case) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n                    <h2>Could not find case!</h2>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n    const caseSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/admin/update/${caseid}`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    new_status: formState.inputs.new_status.value,\r\n                    next_hearing: formState.inputs.next_hearing.value\r\n                }),\r\n                { 'Content-type': 'application/json' }\r\n            );\r\n            navigate('/' + auth.loginID + '/cases');\r\n        } catch (err) { }\r\n        console.log('case update req sent. ')\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {(isLoading) && (<LoadingSpinner asOverlay />)}\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <form className=\"case-form\" onSubmit={caseSubmitHandler}>\r\n                <Input\r\n                    id=\"new_status\"\r\n                    type=\"text\"\r\n                    label=\"Case Status:  \"\r\n                    element=\"input\"\r\n                    errorText=\"This is a required Field.\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    onInput={inputHandler}\r\n                    initialValue={formState.inputs.new_status.value}\r\n                    initialValidity={formState.inputs.new_status.isValid}\r\n                />\r\n                <Input\r\n                    id=\"next_hearing\"\r\n                    type=\"text\"\r\n                    label=\" Next Hearing Date: \"\r\n                    element=\"input\"\r\n                    errorText=\"This is a required Field. Please Enter Date DD-MM-YYYY format. \"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    onInput={inputHandler}\r\n                    initialValue={formState.inputs.next_hearing.value}\r\n                    initialValidity={formState.inputs.next_hearing.isValid}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid} >\r\n                    Update\r\n                </Button>\r\n            </form>\r\n        </React.Fragment>\r\n\r\n    );\r\n};","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/validators\";\r\nimport './Input.css';\r\n\r\nfunction caseReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ALTER':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default function Input(props) {\r\n\r\n    const [inputState, dispatch] = useReducer(caseReducer, {\r\n        isValid: props.initialValid || false,\r\n        value: props.initialValue || '',\r\n        isTouched: false\r\n    })\r\n\r\n    function changeHandler(event) {\r\n        dispatch({\r\n            type: 'ALTER',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    function touchHandler(event) {\r\n        dispatch({\r\n            type: 'TOUCH',\r\n        })\r\n    }\r\n    const { id, onInput } = props;\r\n    const { isValid, value } = inputState;\r\n\r\n    //useEffect(() = > {trigger this action - function  },[when these things change - dependencies])\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, isValid, value, onInput])\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                type={props.type}\r\n                placeholder={props.placeHolder}\r\n                id={props.id}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) :\r\n            (\r\n                <textarea\r\n                    type={props.type}\r\n                    placeholder={props.placeHolder}\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    if (!state.inputs[inputId]) {\r\n                        continue; //don't go ahead with this iteration of for loop and go to next iteration.\r\n                    }\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []); //dispatch can be a dependency but react makes sure dispatch of usereducer never\r\n    //changes so can be ommited.\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};"],"names":["UpdateCases","navigate","useNavigate","auth","useContext","AuthContext","_useHttpProcess","useHttpProcess","isLoading","sendRequest","error","clearError","caseid","useParams","caseID","_useState","useState","_useState2","_slicedToArray","req_case","setReq_case","_useForm","useForm","new_status","value","isValid","next_hearing","_useForm2","formState","inputHandler","setFormData","useEffect","getCaseData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","concat","process","REACT_APP_BACKEND_URL","sent","foundCase","t0","stop","apply","arguments","console","log","_jsx","className","children","Card","caseSubmitHandler","_ref2","_callee2","event","_context2","preventDefault","JSON","stringify","inputs","loginID","_x","_jsxs","React","ErrorModal","onClear","LoadingSpinner","asOverlay","onSubmit","Input","id","type","label","element","errorText","validators","VALIDATOR_REQUIRE","onInput","initialValue","initialValidity","Button","disabled","caseReducer","state","action","_objectSpread","val","validate","isTouched","props","_useReducer","useReducer","initialValid","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","placeholder","placeHolder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}