{"version":3,"file":"static/js/613.19975164.chunk.js","mappings":"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","sources":["citizens/pages/Authenticate.js","shared/formElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport Button from \"../../shared/formElements/Button\";\r\nimport Input from \"../../shared/formElements/Input\";\r\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Card from \"../../shared/UIelements/Card\";\r\nimport { AuthContext } from \"../../shared/context/authContext\";\r\nimport './Authenticate.css';\r\nimport ErrorModal from \"../../shared/UIelements/ErrorModal\";\r\nimport { useHttpProcess } from \"../../shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../../shared/UIelements/LoadingSpinner\";\r\n\r\nexport default function Authenticate() {\r\n\r\n    const auth = useContext(AuthContext);\r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const { isLoading, sendRequest, error, clearError } = useHttpProcess();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        email: { value: '', isValid: false },\r\n        password: { value: '', isValid: false }\r\n    }, false);\r\n\r\n    const switchModeHandler = () => {\r\n        if (!isLogin) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    idCardNo: undefined\r\n                },\r\n                ((formState.inputs.email.isValid) && (formState.inputs.password.isValid))\r\n            )\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: ' ',\r\n                        isValid: false\r\n                    },\r\n                    idCardNo: {\r\n                        value: ' ',\r\n                        isValid: false\r\n                    }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLogin(prevMode => !prevMode);\r\n    };\r\n\r\n    const userSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        if (isLogin) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/public/login`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    { 'Content-type': 'application/json' }\r\n                );\r\n                console.log(\"login rq sent.\")\r\n                auth.login(responseData.citizen.id);\r\n            } catch (err) { //no need \r\n            }\r\n        }\r\n        else {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/public/signup`,\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value,\r\n                        name: formState.inputs.name.value,\r\n                        idCardNo: formState.inputs.idCardNo.value\r\n                    }),\r\n                    { 'Content-type': 'application/json' }\r\n                );\r\n                console.log(\"signup, req sent.\");\r\n                console.log(responseData.added);\r\n                auth.login(responseData.added.id);\r\n            } catch (error) { }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {(isLoading) && (<LoadingSpinner asOverlay />)}\r\n            <Card className=\"authentication\">\r\n                <form onSubmit={userSubmitHandler}>\r\n                    {!isLogin && <Input\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        id=\"name\"\r\n                        label=\" Name: \"\r\n                        errorText=\"Please enter valid Name. \"\r\n                        validators={[VALIDATOR_REQUIRE()]}\r\n                        onInput={inputHandler}\r\n                    />}\r\n                    <Input\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        id=\"email\"\r\n                        label=\" Your Email: \"\r\n                        errorText=\"Please enter a valid E-Mail input. \"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        onInput={inputHandler}\r\n                    />\r\n                    {!isLogin && <Input\r\n                        element=\"input\"\r\n                        type=\"number\"\r\n                        id=\"idCardNo\"\r\n                        label=\" Your Aadhar Number/VoterID Number :\"\r\n                        errorText=\"Enter a valid number of 12 digits\"\r\n                        validators={[VALIDATOR_MINLENGTH(12)]}\r\n                        onInput={inputHandler}\r\n                    />}\r\n                    <Input\r\n                        element=\"input\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        label=\" Your Password: \"\r\n                        errorText=\"Enter a valid Password of 6 digits or more.\"\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        onInput={inputHandler}\r\n                    />\r\n\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>{isLogin ? 'LOGIN' : 'SIGNUP'}</Button>\r\n                </form>\r\n                <hr />\r\n                <Button inverse onClick={switchModeHandler}>Switch to {isLogin ? 'SIGNUP' : 'LOGIN'}</Button>\r\n            </Card>\r\n        </React.Fragment >\r\n    );\r\n}\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../util/validators\";\r\nimport './Input.css';\r\n\r\nfunction caseReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ALTER':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default function Input(props) {\r\n\r\n    const [inputState, dispatch] = useReducer(caseReducer, {\r\n        isValid: props.initialValid || false,\r\n        value: props.initialValue || '',\r\n        isTouched: false\r\n    })\r\n\r\n    function changeHandler(event) {\r\n        dispatch({\r\n            type: 'ALTER',\r\n            val: event.target.value,\r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    function touchHandler(event) {\r\n        dispatch({\r\n            type: 'TOUCH',\r\n        })\r\n    }\r\n    const { id, onInput } = props;\r\n    const { isValid, value } = inputState;\r\n\r\n    //useEffect(() = > {trigger this action - function  },[when these things change - dependencies])\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, isValid, value, onInput])\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                type={props.type}\r\n                placeholder={props.placeHolder}\r\n                id={props.id}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        ) :\r\n            (\r\n                <textarea\r\n                    type={props.type}\r\n                    placeholder={props.placeHolder}\r\n                    id={props.id}\r\n                    rows={props.rows || 3}\r\n                    onChange={changeHandler}\r\n                    onBlur={touchHandler}\r\n                    value={inputState.value}\r\n                />\r\n            );\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n                'form-control--invalid'}`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n}","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    if (!state.inputs[inputId]) {\r\n                        continue; //don't go ahead with this iteration of for loop and go to next iteration.\r\n                    }\r\n                    formIsValid = formIsValid && action.isValid;\r\n                }\r\n                else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []); //dispatch can be a dependency but react makes sure dispatch of usereducer never\r\n    //changes so can be ommited.\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};"],"names":["Authenticate","auth","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","isLogin","setIsLogin","_useHttpProcess","useHttpProcess","isLoading","sendRequest","error","clearError","_useForm","useForm","email","value","isValid","password","_useForm2","formState","inputHandler","setFormData","userSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","responseData","_responseData","wrap","_context","prev","next","preventDefault","concat","process","REACT_APP_BACKEND_URL","JSON","stringify","inputs","sent","console","log","login","citizen","id","t0","name","idCardNo","added","t1","stop","_x","apply","arguments","_jsxs","React","children","_jsx","ErrorModal","onClear","LoadingSpinner","asOverlay","Card","className","onSubmit","Input","element","type","label","errorText","validators","VALIDATOR_REQUIRE","onInput","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","Button","disabled","inverse","onClick","_objectSpread","undefined","prevMode","caseReducer","state","action","val","validate","isTouched","props","_useReducer","useReducer","initialValid","initialValue","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","useEffect","placeholder","placeHolder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}